AWSTemplateFormatVersion: '2010-09-09'
Description: Pre Execution Taks - Parameter Validation and Lambda Copy
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: General Settings
      Parameters:
      - MyS3Bucket
      - PrivSubnet1
      - PrivSubnet2
    - Label:
        default: AWS Quick Start Configuration
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix

    ParameterLabels:
      MyS3Bucket:
        default: Output S3 Bucket Name
      PrivSubnet1:
        default: Private Subnet for HANA Primary
      PrivSubnet2:
        default: Private Subnet for HANA Secondary
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix

Parameters:
  MyS3Bucket:
    Description: 'OPTIONAL: Bucket Name where the zip file output should be placed, if left blank a bucket name will be automatically generated.'
    Type: String
    Default: ''
  PrivSubnet1:
    Description: 'Private Subnet for HANA Primary Instance'
    Type: String
    Default: ''
  PrivSubnet2:
    Description: 'Private Subnet for HANA Secondary Instance'
    Type: String
    Default: ''
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-)
    Default: hanaqs
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
    Default: 'hanaha'
    Description: S3 key prefix for the Quick Start assets. 
    Type: String

Conditions:
  AutoGenOutputBucketName:
    Fn::Not:
    - Fn::Equals:
      - Ref: MyS3Bucket
      - ''

Resources:
  CreateNewMyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::If:
        - AutoGenOutputBucketName
        - Ref: MyS3Bucket
        - Ref: AWS::NoValue
      VersioningConfiguration:
        Status: Enabled
      Tags: []

  InvokePreTasksLambda:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - PreTasksLambdaFunction
        - Arn
      DestBucket:
        Ref: CreateNewMyS3Bucket
      SourceBucket:
        Ref: QSS3BucketName
      Prefix: 
        Ref: QSS3KeyPrefix
      PrivSubnet1:
        Ref: PrivSubnet1
      PrivSubnet2:
        Ref: PrivSubnet2
      Objects:
      - /HAConfig.zip
      - /PreHAConfig.zip
  
  PreTasksLambdaRole:
    Type: AWS::IAM::Role
    DependsOn: CreateNewMyS3Bucket
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Path: "/"
      Policies:
      - PolicyName: preTasksLambdaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
            - Fn::Sub: arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}/*
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:DeleteObject
            Resource:
            - Fn::Sub: arn:aws:s3:::${CreateNewMyS3Bucket}/${QSS3KeyPrefix}/*
          - Effect: Allow
            Action:
            - ec2:DescribeRouteTables
            Resource: '*'
  
  PreTasksLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: PreTasks Function
      Handler: index.handler
      Runtime: python3.6
      Role:
        Fn::GetAtt:
        - PreTasksLambdaRole
        - Arn
      Timeout: 240
      Code:
        ZipFile: !Sub |
           import json
           import logging
           import threading
           import boto3
           import cfnresponse
           
           responseStr = {'Status' : {}}

           def copy_objects(source_bucket, dest_bucket, prefix, objects):
               s3 = boto3.client('s3')
               for o in objects:
                   key = prefix + o
                   copy_source = {
                       'Bucket': source_bucket,
                       'Key': key
                   }
                   s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,Key=key)
           
           def delete_objects(bucket, prefix, objects):
               s3 = boto3.client('s3')
               objects = {'Objects': [{'Key': prefix + o} for o in objects]}
               s3.delete_objects(Bucket=bucket, Delete=objects)
           
           def get_route_table(subnet):
               ec2 = boto3.client('ec2')
               retValue = ec2.describe_route_tables(Filters=[{'Name': 'association.subnet-id', 'Values': [subnet]}])
               if len(retValue['RouteTables']) > 0 :
                  return retValue['RouteTables'][0]['Associations'][0]['RouteTableId']
               else:
                  return "defaultRoute"

           def validate_common_route_table(subnet1, subnet2):
              if ( get_route_table(subnet1) == get_route_table(subnet2) ):
                  return True
              else:
                  return False

           def timeout(event, context):
               logging.error('Execution is about to time out, sending failure response to CloudFormation')
               cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
           
           def handler(event, context):
               # make sure we send a failure to CloudFormation if the function is going to timeout
               timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
               timer.start()
           
               print('Received event: %s' % json.dumps(event))
               status = cfnresponse.SUCCESS
               try:
                   source_bucket = event['ResourceProperties']['SourceBucket']
                   dest_bucket = event['ResourceProperties']['DestBucket']
                   prefix = event['ResourceProperties']['Prefix']
                   objects = event['ResourceProperties']['Objects']
                   subnet1 = event['ResourceProperties']['PrivSubnet1']
                   subnet2 = event['ResourceProperties']['PrivSubnet2']
                   if event['RequestType'] == 'Delete':
                       delete_objects(dest_bucket, prefix, objects)
                   else:
                       if (validate_common_route_table(subnet1, subnet2)):
                              copy_objects(source_bucket, dest_bucket, prefix, objects)
                              responseStr['Status']['PreTasksLambdaFunction'] = "All Good"
                       else:
                              logging.error('Route Table Not Same for Private Subnets', exc_info=True)
                              responseStr['Status']['PreTasksLambdaFunction'] = "Route Table Needs to be Same for Private Subnets"
                              status = cfnresponse.FAILED
               except Exception as e:
                   logging.error('Exception: %s' % e, exc_info=True)
                   responseStr['Status']['PreTasksLambdaFunction'] = str(e)
                   status = cfnresponse.FAILED
               finally:
                   timer.cancel()
                   cfnresponse.send(event, context, status, {'Status':json.dumps(responseStr)}, None)
           
Outputs:
  MyS3Bucket:
    Value:
      Ref: CreateNewMyS3Bucket
  ResultInvokePreTasksLambda:
    Value: !GetAtt 
        - InvokePreTasksLambda
        - Status
